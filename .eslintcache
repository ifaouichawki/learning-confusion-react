[{"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\App.js":"1","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\index.js":"2","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\MenuComponent.js":"3","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\shared\\dishes.js":"4","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\reportWebVitals.js":"5","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\DishdetailComponent.js":"6","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\MainComponent.js":"7","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\HeaderComponent.js":"8","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\FooterComponent.js":"9","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\ContactComponent.js":"10","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\shared\\leaders.js":"11","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\shared\\comments.js":"12","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\shared\\promotions.js":"13","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\HomeComponent.js":"14","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\AboutComponent.js":"15","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\configureStore.js":"16","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\dishes.js":"17","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\comments.js":"18","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\promotions.js":"19","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\leaders.js":"20","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\ActionCreators.js":"21","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\ActionTypes.js":"22","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\LoadingComponent.js":"23","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\forms.js":"24","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\shared\\baseUrl.js":"25"},{"size":533,"mtime":1610116224002,"results":"26","hashOfConfig":"27"},{"size":309,"mtime":1610116302682,"results":"28","hashOfConfig":"27"},{"size":2249,"mtime":1610103472458,"results":"29","hashOfConfig":"27"},{"size":1490,"mtime":1609766683500,"results":"30","hashOfConfig":"27"},{"size":362,"mtime":1609338865296,"results":"31","hashOfConfig":"27"},{"size":6141,"mtime":1610110301772,"results":"32","hashOfConfig":"27"},{"size":3253,"mtime":1610110661169,"results":"33","hashOfConfig":"27"},{"size":5384,"mtime":1610010359119,"results":"34","hashOfConfig":"27"},{"size":2639,"mtime":1609763660120,"results":"35","hashOfConfig":"27"},{"size":10481,"mtime":1610026114226,"results":"36","hashOfConfig":"27"},{"size":2382,"mtime":1609767120851,"results":"37","hashOfConfig":"27"},{"size":4279,"mtime":1609767063327,"results":"38","hashOfConfig":"27"},{"size":445,"mtime":1609767103236,"results":"39","hashOfConfig":"27"},{"size":1662,"mtime":1610110607316,"results":"40","hashOfConfig":"27"},{"size":4365,"mtime":1609840440844,"results":"41","hashOfConfig":"27"},{"size":805,"mtime":1610025227634,"results":"42","hashOfConfig":"27"},{"size":656,"mtime":1610021608785,"results":"43","hashOfConfig":"27"},{"size":640,"mtime":1610109992329,"results":"44","hashOfConfig":"27"},{"size":669,"mtime":1610102788453,"results":"45","hashOfConfig":"27"},{"size":202,"mtime":1610014093121,"results":"46","hashOfConfig":"27"},{"size":4211,"mtime":1610109907376,"results":"47","hashOfConfig":"27"},{"size":413,"mtime":1610106970461,"results":"48","hashOfConfig":"27"},{"size":259,"mtime":1610021840685,"results":"49","hashOfConfig":"27"},{"size":169,"mtime":1610025251048,"results":"50","hashOfConfig":"27"},{"size":48,"mtime":1610110450683,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14nzitq",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\App.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\index.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\MenuComponent.js",[],["111","112"],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\shared\\dishes.js",[],["113","114"],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\reportWebVitals.js",[],["115","116"],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\DishdetailComponent.js",["117","118","119","120","121"],"import React, { Component } from \"react\";\r\nimport {Card,CardImg,CardText,CardBody,CardTitle,Modal, ModalHeader,ModalBody,Breadcrumb,BreadcrumbItem,Button,Row,Col,Label,} from \"reactstrap\";\r\nimport { Control, LocalForm, Errors } from \"react-redux-form\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n\r\nconst maxLength = len => val => !val || val.length <= len;\r\nconst minLength = len => val => val && val.length >= len;\r\n\r\nclass CommentForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isModalOpen: false,\r\n      isNavOpen: false\r\n      \r\n    };\r\n    this.toggleModal = this.toggleModal.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  toggleModal() {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen\r\n    });\r\n  }\r\n\r\n  handleSubmit(values) {\r\n    this.toggleModal();\r\n    this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button outline onClick={this.toggleModal}>\r\n          <span className=\"fa fa-pencil\" /> Submit Comment\r\n        </Button>\r\n        <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n          <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n          <ModalBody>\r\n            <LocalForm onSubmit={this.handleSubmit}>\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"rating\" md={12}>\r\n                  Rating\r\n                </Label>\r\n                <Col md={{ size: 12 }}>\r\n                  <Control.select\r\n                    model=\".rating\"\r\n                    name=\"rating\"\r\n                    className=\"form-control\"\r\n                  >\r\n                    <option>1</option>\r\n                    <option>2</option>\r\n                    <option>3</option>\r\n                    <option>4</option>\r\n                    <option>5</option>\r\n                  </Control.select>\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"author\" md={12}>\r\n                  Your Name\r\n                </Label>\r\n                <Col md={12}>\r\n                  <Control.text\r\n                    model=\".author\"\r\n                    id=\"author\"\r\n                    name=\"author\"\r\n                    placeholder=\"Your Name\"\r\n                    className=\"form-control\"\r\n                  \r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".author\"\r\n                    show=\"touched\"\r\n                    messages={{\r\n                      required: \"Required\",\r\n                      minLength: \"Must be greater than 2 characters\",\r\n                      maxLength: \"Must be 15 characters or less\"\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"comment\" md={12}>\r\n                  Comment\r\n                </Label>\r\n                <Col md={12}>\r\n                  <Control.textarea\r\n                    model=\".comment\"\r\n                    id=\"comment\"\r\n                    name=\"comment\"\r\n                    rows={5}\r\n                    className=\"form-control\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                Submit\r\n              </Button>\r\n            </LocalForm>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction RenderDish({ dish }) {\r\n  return (\r\n    <div className=\"col-12 col-md-5 m-1\">\r\n        <Card>\r\n          <CardImg top src={baseUrl + dish.image} alt={dish.name} />\r\n          <CardBody>\r\n            <CardTitle>{dish.name}</CardTitle>\r\n            <CardText>{dish.description}</CardText>\r\n          </CardBody>\r\n        </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction RenderComments({ comments, postComment, dishId }) {\r\n  if (comments != null) {\r\n    return (\r\n      <div className=\"col-12 col-md-5 m-1\">\r\n        <h4>Comments</h4>\r\n          {comments.map(comment => {\r\n            return (\r\n              <ul  key={comment.id}>\r\n                <li key={comment.id}>\r\n                  <p>{comment.comment}</p>\r\n                  <p>\r\n                    -- {comment.author} ,{\" \"}\r\n                    {new Intl.DateTimeFormat(\"en-US\", {\r\n                      year: \"numeric\",\r\n                      month: \"short\",\r\n                      day: \"2-digit\"\r\n                    }).format(new Date(Date.parse(comment.date)))}\r\n                  </p>\r\n                </li>\r\n              </ul>\r\n            );\r\n          })}\r\n        <CommentForm dishId={dishId} postComment={postComment} />\r\n      </div>\r\n    );\r\n  } else return <div />;\r\n}\r\n\r\nconst DishDetail = props => {\r\n  if (props.isLoading) {\r\n    return(\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Loading />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  else if (props.errMess) {\r\n    return(\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <h4>{props.errMess}</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n   else if (props.dish != null)\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Breadcrumb>\r\n            <BreadcrumbItem>\r\n              <Link to=\"/menu\">Menu</Link>\r\n            </BreadcrumbItem>\r\n            <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n          </Breadcrumb>\r\n          <div className=\"col-12\">\r\n            <h3>{props.dish.name}</h3>\r\n            <hr />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <RenderDish dish={props.dish} />\r\n          <RenderComments comments={props.comments}\r\n            postComment={props.postComment}\r\n            dishId={props.dish.id}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n   else \r\n      return(\r\n        <div></div>\r\n      );\r\n};\r\n\r\nexport default DishDetail;\r\n","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\MainComponent.js",["122"],"import React, { Component } from 'react';\r\nimport Home from './HomeComponent';\r\nimport Menu from './MenuComponent';\r\nimport Contact from './ContactComponent';\r\nimport About from './AboutComponent';\r\nimport DishDetail from './DishdetailComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { postComment, fetchDishes, fetchComments, fetchPromos } from '../redux/ActionCreators';\r\nimport { actions } from 'react-redux-form';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      dishes: state.dishes,\r\n      comments: state.comments,\r\n      promotions: state.promotions,\r\n      leaders: state.leaders\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  postComment: (dishId, rating, author, Comment) => dispatch(postComment(dishId, rating, author, Comment)),\r\n  fetchDishes: () => {dispatch(fetchDishes())},\r\n  resetFeedbackForm: () => { dispatch(actions.reset('feedback'))},\r\n  fetchComments: () => {dispatch(fetchComments())},\r\n  fetchPromos: () => {dispatch(fetchPromos())},\r\n\r\n});\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.props.fetchDishes();\r\n    this.props.fetchComments();\r\n    this.props.fetchPromos();\r\n\r\n  }\r\n\r\n \r\n \r\n  render() {\r\n    const HomePage = () => {\r\n        return(\r\n            <Home \r\n                dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\r\n                dishesLoading={this.props.dishes.isLoading}\r\n                dishesErrMess={this.props.dishes.errMess}\r\n                promotion={this.props.promotions.promotions.filter((promo) => promo.featured)[0]}\r\n                promoLoading={this.props.promotions.isLoading}\r\n                promoErrMess={this.props.promotions.errMess}\r\n                leader={this.props.leaders.filter((leader) => leader.featured)[0]}\r\n            />\r\n        )\r\n}\r\n\r\n    const DishWithId =({match}) => {\r\n      return(\r\n        <DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}\r\n          isLoading={this.props.dishes.isLoading}\r\n          errMess={this.props.dishes.errMess}\r\n          comments={this.props.comments.comments.filter((comments) => comments.dishId === parseInt(match.params.dishId,10))} \r\n          commentsErrMess={this.props.comments.errMess}\r\n          addComment={this.props.addComment}\r\n        \r\n        />\r\n      );\r\n    }\r\n\r\n\r\n\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <Switch>\r\n           <Route path=\"/home\" component={HomePage} />\r\n           <Route exact path=\"/menu\" component={() => <Menu dishes={this.props.dishes} />} />\r\n           <Route path=\"/menu/:dishId\" component={DishWithId} />\r\n           <Route exact path=\"/contactus\" component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} />}  />\r\n           <Route exact path=\"/aboutus\" component={() => <About leader={this.props.leaders} />} />\r\n           <Redirect to=\"/home\" />\r\n        </Switch>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\r\n","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\HeaderComponent.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\FooterComponent.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\ContactComponent.js",["123","124","125","126","127","128","129","130","131"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button,  Label, Row, Col } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, Form, Errors, actions } from 'react-redux-form';\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\nconst isNumber = (val) =>  !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Contact extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    \r\n\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n          isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n   \r\n    \r\n    handleSubmit(values) {\r\n        console.log(\"Current State is: \" + JSON.stringify(values));\r\n        alert(\"Current State is: \" + JSON.stringify(values));\r\n        this.props.resetFeedbackForm()\r\n    }\r\n\r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                    <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                            <h5>Our Address</h5>\r\n                            <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                            </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us your Feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\" \r\n                                    placeholder=\"First Name\" \r\n                                    className=\"form-control\"\r\n                                    validators={{\r\n                                        required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                    }}\r\n                                    />\r\n                                <Errors className=\"text-danger\" model=\".firstname\" show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}    \r\n                                    />    \r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\" \r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                           required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                        />\r\n                                    <Errors className=\"text-danger\" model=\".lastname\" show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}    \r\n                                    /> \r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\" \r\n                                    placeholder=\"Tel. Number\" \r\n                                    className=\"form-control\"\r\n                                    validators={{\r\n                                        required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                    }}\r\n                                    />\r\n                                <Errors className=\"text-danger\" model=\".telnum\" show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumer: 'Must be a number'\r\n                                        }}    \r\n                                    /> \r\n\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                <Control.text model=\".email\" id=\"email\" name=\"email\" \r\n                                    placeholder=\"Email\" \r\n                                    className=\"form-control\"\r\n                                    validators={{\r\n                                        required, validEmail\r\n                                    }}\r\n                                    />\r\n                                <Errors className=\"text-danger\" model=\".email\" show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                        }}    \r\n                                   />  \r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                            className=\"form-check-input\"\r\n                                               /> {' '}\r\n                                            <strong>May we contact you ?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\" \r\n                                    className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                     rows=\"12\"\r\n                                     className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                               <Col md={{size:10, offset: 2}}>\r\n                                   <Button type=\"submit\" color=\"primary\">\r\n                                       Send Feedback\r\n                                   </Button>\r\n                               </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default Contact;","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\shared\\leaders.js",[],["132","133"],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\shared\\comments.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\shared\\promotions.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\HomeComponent.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\AboutComponent.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\configureStore.js",[],["134","135"],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\dishes.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\comments.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\promotions.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\leaders.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\ActionCreators.js",["136"],"import * as ActionTypes from './ActionTypes';\r\nimport { DISHES } from '../shared/dishes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n\r\nexport const addComment = (comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n       \r\n});\r\n\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch)  =>  {\r\n\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    }\r\n    newComment.date = new Date().toISOString();\r\n\r\n    return fetch(baseUrl + 'comments', {\r\n        method: 'POST',\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'same-origin'\r\n    })\r\n\r\n    .then(response => {\r\n        if (response.ok) {\r\n            return response;\r\n        }\r\n        else {\r\n            var error = new Error('Error' + response.status + ': ' + response.statusText)\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n    },\r\n    error => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n    })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addComment(response)))\r\n    .catch(error => { console.log('Post comments ' , error.message)\r\n        alert('Your comment could not be posted\\nError' + error.message); })\r\n\r\n        \r\n}\r\n\r\nexport const fetchDishes = () => (dispatch) => {\r\n    dispatch(dishesLoading(true));\r\n\r\n   return fetch(baseUrl + 'dishes')\r\n       .then(response => {\r\n           if (response.ok) {\r\n               return response;\r\n           }\r\n           else {\r\n               var error = new Error('Error' + response.status + ': ' + response.statusText)\r\n               error.response = response;\r\n               throw error;\r\n           }\r\n       },\r\n       error => {\r\n           var errmess = new Error(error.message);\r\n           throw errmess;\r\n       })\r\n       .then(response => response.json())\r\n       .then(dishes => dispatch(addDishes(dishes)))\r\n       .catch(error => dispatch(dishesFailed(error.message)));\r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\n\r\nexport const fetchComments = () => (dispatch) => {\r\n   return fetch(baseUrl + 'comments')\r\n   .then(response => {\r\n    if (response.ok) {\r\n        return response;\r\n    }\r\n    else {\r\n        var error = new Error('Error' + response.status + ': ' + response.statusText)\r\n        error.response = response;\r\n        throw error;\r\n    }\r\n   },\r\n   error => {\r\n       var errmess = new Error(error.message);\r\n       throw errmess;\r\n       })\r\n       .then(response => response.json())\r\n       .then(comments => dispatch(addComments(comments)))\r\n       .catch(error => dispatch(commentsFailed(error.message)));\r\n\r\n}\r\n\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n    dispatch(promosLoading(true));\r\n\r\n   return fetch(baseUrl + 'promotions')\r\n   .then(response => {\r\n    if (response.ok) {\r\n        return response;\r\n    }\r\n    else {\r\n        var error = new Error('Error' + response.status + ': ' + response.statusText)\r\n        error.response = response;\r\n        throw error;\r\n    }\r\n    },\r\n    error => {\r\n       var errmess = new Error(error.message);\r\n       throw errmess;\r\n    })\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addPromos(promos)))\r\n    .catch(error => dispatch(promosFailed(error.message)));\r\n\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: promos\r\n});\r\n\r\n","C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\ActionTypes.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\components\\LoadingComponent.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\redux\\forms.js",[],"C:\\Users\\chrai\\Desktop\\Coursera\\React\\confusion\\src\\shared\\baseUrl.js",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"137","replacedBy":"141"},{"ruleId":"139","replacedBy":"142"},{"ruleId":"137","replacedBy":"143"},{"ruleId":"139","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":9,"column":7,"nodeType":"147","messageId":"148","endLine":9,"endColumn":16},{"ruleId":"145","severity":1,"message":"149","line":10,"column":7,"nodeType":"147","messageId":"148","endLine":10,"endColumn":16},{"ruleId":"150","severity":1,"message":"151","line":50,"column":19,"nodeType":"152","endLine":54,"endColumn":20},{"ruleId":"150","severity":1,"message":"153","line":68,"column":19,"nodeType":"152","endLine":75,"endColumn":21},{"ruleId":"150","severity":1,"message":"154","line":93,"column":19,"nodeType":"152","endLine":99,"endColumn":21},{"ruleId":"155","severity":1,"message":"156","line":37,"column":3,"nodeType":"157","messageId":"158","endLine":40,"endColumn":4},{"ruleId":"145","severity":1,"message":"159","line":4,"column":33,"nodeType":"147","messageId":"148","endLine":4,"endColumn":40},{"ruleId":"160","severity":1,"message":"161","line":78,"column":29,"nodeType":"152","endLine":78,"endColumn":71},{"ruleId":"150","severity":1,"message":"153","line":92,"column":37,"nodeType":"152","endLine":98,"endColumn":39},{"ruleId":"150","severity":1,"message":"153","line":111,"column":37,"nodeType":"152","endLine":117,"endColumn":43},{"ruleId":"150","severity":1,"message":"153","line":130,"column":33,"nodeType":"152","endLine":136,"endColumn":39},{"ruleId":"150","severity":1,"message":"153","line":151,"column":33,"nodeType":"152","endLine":157,"endColumn":39},{"ruleId":"150","severity":1,"message":"162","line":169,"column":45,"nodeType":"152","endLine":171,"endColumn":50},{"ruleId":"150","severity":1,"message":"151","line":177,"column":37,"nodeType":"152","endLine":178,"endColumn":62},{"ruleId":"150","severity":1,"message":"154","line":187,"column":37,"nodeType":"152","endLine":189,"endColumn":65},{"ruleId":"137","replacedBy":"163"},{"ruleId":"139","replacedBy":"164"},{"ruleId":"137","replacedBy":"165"},{"ruleId":"139","replacedBy":"166"},{"ruleId":"145","severity":1,"message":"167","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":16},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],["168"],["169"],["168"],["169"],"no-unused-vars","'maxLength' is assigned a value but never used.","Identifier","unusedVar","'minLength' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'actions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["168"],["169"],["168"],["169"],"'DISHES' is defined but never used.","no-global-assign","no-unsafe-negation"]